{
  "stats": {
    "suites": 1,
    "tests": 33,
    "passes": 33,
    "pending": 0,
    "failures": 0,
    "start": "2022-10-16T04:19:54.123Z",
    "end": "2022-10-16T04:20:13.259Z",
    "duration": 19136,
    "testsRegistered": 33,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "dac4bee6-bdc2-4897-ad7a-c1226d72b594",
      "title": "",
      "fullFile": "C:\\Test QA\\api-automation-testing-using-mocha-chai-javascript\\automation-api-register.js",
      "file": "\\automation-api-register.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "cd0fdb16-a976-4d81-97bf-3277b9f3d531",
          "title": "Test POST /REGISTER",
          "fullFile": "C:\\Test QA\\api-automation-testing-using-mocha-chai-javascript\\automation-api-register.js",
          "file": "\\automation-api-register.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify Success Register",
              "fullTitle": "Test POST /REGISTER Verify Success Register",
              "timedOut": false,
              "duration": 1058,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// TEST CASE\n    let random_email = Math.random().toString(36).substring(7); // MEMBUAT RANDOM KATA\n    const response = await request_url // INI BUAT NGARAH KE URL BARRU.PYTHONANYWHERE.COM\n      .post(\"/register\")\n      .send({ email: random_email + \"@gmail.com\", password: random_email, name: random_email }); // INI SESUAI BODY\n    const hasil_response = response.body; // BERISI HASIL RESPONSE HASIL NEMBAK API, ADA DATA, MESSAGE, STATUS\n    assert(response.body.status).to.eql('SUCCESS_REGISTER');\n    assert(response.body.data).to.eql('berhasil');\n    assert(response.body.message).to.eql('created user!');\n    assert(hasil_response).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {},
              "uuid": "ed71d938-b233-48c9-97fe-b168f165437f",
              "parentUUID": "cd0fdb16-a976-4d81-97bf-3277b9f3d531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Success Register with Additional IP Address in Body",
              "fullTitle": "Test POST /REGISTER Verify Success Register with Additional IP Address in Body",
              "timedOut": false,
              "duration": 524,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_text = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .send({ email: random_text + \"@gmail.com\", password: random_text, name: random_text, ip_address: \"127.0.0.1\" });\nconst hasil_response = response.body;\nassert(response.body.status).to.eql('SUCCESS_REGISTER');\nassert(response.body.data).to.eql('berhasil');\nassert(response.body.message).to.eql('created user!');\nassert(hasil_response).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {},
              "uuid": "7cc9e180-6b18-4238-ba2e-239d9058369c",
              "parentUUID": "cd0fdb16-a976-4d81-97bf-3277b9f3d531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Success Register with Additional Params",
              "fullTitle": "Test POST /REGISTER Verify Success Register with Additional Params",
              "timedOut": false,
              "duration": 510,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_text = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register?email=lalala&password=hahhaha\")\n  .send({ email: random_text + \"@gmail.com\", password: random_text, name: random_text, ip_address: \"127.0.0.1\" });\nconst hasil_response = response.body;\nassert(response.body.status).to.eql('SUCCESS_REGISTER');\nassert(response.body.data).to.eql('berhasil');\nassert(response.body.message).to.eql('created user!');\nassert(hasil_response).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {},
              "uuid": "978a9ba3-1d64-44d7-9811-debee043279a",
              "parentUUID": "cd0fdb16-a976-4d81-97bf-3277b9f3d531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Success Register with Random Authorization",
              "fullTitle": "Test POST /REGISTER Verify Success Register with Random Authorization",
              "timedOut": false,
              "duration": 524,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_text = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .set({ Authorization: `Bearer asjdhgagduahuidghaiduawgdiuwaghsgjhagdjhgdshjsgd` })\n  .send({ email: random_text + \"@gmail.com\", password: random_text, name: random_text});\nconst hasil_response = response.body;\nassert(response.body.status).to.eql('SUCCESS_REGISTER');\nassert(response.body.data).to.eql('berhasil');\nassert(response.body.message).to.eql('created user!');\nassert(hasil_response).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {},
              "uuid": "516599c1-a93a-4ed0-a03f-ddd21fb76038",
              "parentUUID": "cd0fdb16-a976-4d81-97bf-3277b9f3d531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Success Register with Random Authorization and Params",
              "fullTitle": "Test POST /REGISTER Verify Success Register with Random Authorization and Params",
              "timedOut": false,
              "duration": 514,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_text = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register?email=bahahahaahaha@gmail.com&password=waluyo\")\n  .set({ Authorization: `Bearer asjdhgagduahuidghaiduawgdiuwaghsgjhagdjhgdshjsgd` })\n  .send({ email: random_text + \"@gmail.com\", password: random_text, name: random_text});\nconst hasil_response = response.body;\nassert(response.body.status).to.eql('SUCCESS_REGISTER');\nassert(response.body.data).to.eql('berhasil');\nassert(response.body.message).to.eql('created user!');\nassert(hasil_response).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {},
              "uuid": "980cb63f-dffd-4849-ad73-401933961894",
              "parentUUID": "cd0fdb16-a976-4d81-97bf-3277b9f3d531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Empty Body, Only Dictionary",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Empty Body, Only Dictionary",
              "timedOut": false,
              "duration": 508,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_pass = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .send({ });\nconst hasil_response = response.body;\nassert(response.status).to.eql(500);",
              "err": {},
              "uuid": "8087f0d4-a0da-493a-8309-ccc40c683532",
              "parentUUID": "cd0fdb16-a976-4d81-97bf-3277b9f3d531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Empty Password",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Empty Password",
              "timedOut": false,
              "duration": 500,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_email = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .send({ email: random_email + \"@gmail.com\", password: \"\", name: random_email });\nconst hasil_response = response.body;\nassert(response.body.status).to.eql('FAILED_REGISTER');\nassert(response.body.data).to.eql('Email/Username/Password tidak boleh kosong');\nassert(hasil_response).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {},
              "uuid": "16468c2c-9072-49b5-bf20-7f306ba97d20",
              "parentUUID": "cd0fdb16-a976-4d81-97bf-3277b9f3d531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Empty Email",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Empty Email",
              "timedOut": false,
              "duration": 508,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_email = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .send({ email: \"\", password: \"testerjago\", name: random_email });\nconst hasil_response = response.body;\nassert(response.body.status).to.eql('FAILED_REGISTER');\nassert(response.body.data).to.eql('Email/Username/Password tidak boleh kosong');\nassert(hasil_response).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {},
              "uuid": "5a4591ee-a41a-4598-b7b0-62d120458f14",
              "parentUUID": "cd0fdb16-a976-4d81-97bf-3277b9f3d531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Empty Name",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Empty Name",
              "timedOut": false,
              "duration": 1178,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_email = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .send({ email: random_email + \"@gmail.com\", password: \"testerjago\", name: \"\" });\nconst hasil_response = response.body;\nassert(response.body.status).to.eql('FAILED_REGISTER');\nassert(response.body.data).to.eql('Email/Username/Password tidak boleh kosong');\nassert(hasil_response).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {},
              "uuid": "c454bb08-3205-4455-8fdd-62a192646d39",
              "parentUUID": "cd0fdb16-a976-4d81-97bf-3277b9f3d531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Symbol in Name Field",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Symbol in Name Field",
              "timedOut": false,
              "duration": 536,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_email = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .send({ email: random_email + \"@gmail.com\", password: \"testerjago\", name: random_email + \"&#\" });\nconst hasil_response = response.body;\nassert(response.body.status).to.eql('FAILED_REGISTER');\nassert(response.body.data).to.eql('Nama atau password tidak valid');\nassert(hasil_response).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {},
              "uuid": "beef2b4d-ba71-4699-bfc1-1e4794df6393",
              "parentUUID": "cd0fdb16-a976-4d81-97bf-3277b9f3d531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Symbol in Email Field",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Symbol in Email Field",
              "timedOut": false,
              "duration": 528,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_email = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .send({ email: \"#$$$$$\", password: \"testerjago\", name: random_email });\nconst hasil_response = response.body;\nassert(response.body.status).to.eql('FAILED_REGISTER');\nassert(hasil_response).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {},
              "uuid": "2f8ffe08-7753-4637-affd-0493d9596778",
              "parentUUID": "cd0fdb16-a976-4d81-97bf-3277b9f3d531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with SQLI in Password Field",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with SQLI in Password Field",
              "timedOut": false,
              "duration": 536,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_email = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .send({ email: random_email + \"@gmail.com\", password: \"SELECT\", name: random_email });\nconst hasil_response = response.body;\nassert(response.body.status).to.eql('FAILED_REGISTER');\nassert(response.body.data).to.eql('Nama atau password tidak valid');\nassert(hasil_response).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {},
              "uuid": "908a8e7b-e1b5-405e-bcca-e95fb77f27aa",
              "parentUUID": "cd0fdb16-a976-4d81-97bf-3277b9f3d531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with SQLI in Email Field",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with SQLI in Email Field",
              "timedOut": false,
              "duration": 508,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_email = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .send({ email: \"SELECT id FROM users WHERE username='username' AND password='password' OR 1=1\", password: \"testerjago\", name: random_email });\nconst hasil_response = response.body;\nassert(response.body.status).to.eql('FAILED_REGISTER');\nassert(hasil_response).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {},
              "uuid": "1ad0f120-1838-40fe-aa7a-2fb7ebf0911d",
              "parentUUID": "cd0fdb16-a976-4d81-97bf-3277b9f3d531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with SQLI in Name Field",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with SQLI in Name Field",
              "timedOut": false,
              "duration": 501,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_email = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .send({ email: random_email + \"@gmail.com\", password: \"testerjago\", \n          name: \"SELECT%count%(*)%FROM%Users%WHERE%Username='jebol'%or%1=1%--%'%AND%Password=%'email'\" });\nconst hasil_response = response.body;\nassert(response.body.status).to.eql('FAILED_REGISTER');\nassert(hasil_response).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {},
              "uuid": "225dc1fd-bc30-4f85-b1b5-12fdbbfba998",
              "parentUUID": "cd0fdb16-a976-4d81-97bf-3277b9f3d531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Body Email Only",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Body Email Only",
              "timedOut": false,
              "duration": 503,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_email = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .send({ email: random_email + \"@gmail.com\" });\nassert(response.status).to.eql(500);",
              "err": {},
              "uuid": "17320b66-5be2-4987-8212-b1a54c78fd4d",
              "parentUUID": "cd0fdb16-a976-4d81-97bf-3277b9f3d531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Body Name Only",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Body Name Only",
              "timedOut": false,
              "duration": 509,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_name = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .send({ name: random_name});\nassert(response.status).to.eql(500);",
              "err": {},
              "uuid": "f5970bde-3ae2-45c4-b299-6a9d5755e46b",
              "parentUUID": "cd0fdb16-a976-4d81-97bf-3277b9f3d531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Body Password Only",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Body Password Only",
              "timedOut": false,
              "duration": 1148,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_pass = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .send({ password: random_pass});\nassert(response.status).to.eql(500);",
              "err": {},
              "uuid": "9c6d097f-a264-4647-b6f7-d48bbc7fabcb",
              "parentUUID": "cd0fdb16-a976-4d81-97bf-3277b9f3d531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Max Char in Email Field",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Max Char in Email Field",
              "timedOut": false,
              "duration": 501,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_email = Array.from(Array(55), () => Math.floor(Math.random() * 36).toString(36)).join('');\nlet random_pass = Array.from(Array(11), () => Math.floor(Math.random() * 36).toString(36)).join('');\nconst response = await request_url\n  .post(\"/register\")\n  .send({ email: random_email + \"@gmail.com\", password: random_pass, name: random_email });\nconst hasil_response = response.body;\nassert(response.body.status).to.eql('FAILED_REGISTER');\nassert(response.body.data).to.eql('Email/Username/Password melebihin maksimal karakter');\nassert(hasil_response).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {},
              "uuid": "6a506182-b28d-4ee2-bd58-4bbd126ab878",
              "parentUUID": "cd0fdb16-a976-4d81-97bf-3277b9f3d531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Max Char in Password Field",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Max Char in Password Field",
              "timedOut": false,
              "duration": 507,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_email = Array.from(Array(10), () => Math.floor(Math.random() * 36).toString(36)).join('');\nlet random_pass = Array.from(Array(38), () => Math.floor(Math.random() * 36).toString(36)).join('');\nconst response = await request_url\n  .post(\"/register\")\n  .send({ email: random_email + \"@gmail.com\", password: random_pass, name: random_email });\nconst hasil_response = response.body;\nassert(response.body.status).to.eql('FAILED_REGISTER');\nassert(response.body.data).to.eql('Email/Username/Password melebihin maksimal karakter');\nassert(hasil_response).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {},
              "uuid": "ae2b8762-aa84-4b6e-9ba1-13208e87c4f1",
              "parentUUID": "cd0fdb16-a976-4d81-97bf-3277b9f3d531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register without Body",
              "fullTitle": "Test POST /REGISTER Verify Failed Register without Body",
              "timedOut": false,
              "duration": 501,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_pass = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\nassert(response.status).to.eql(500);",
              "err": {},
              "uuid": "84684a6e-e145-4642-b495-45d97da0d80b",
              "parentUUID": "cd0fdb16-a976-4d81-97bf-3277b9f3d531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Method GET",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Method GET",
              "timedOut": false,
              "duration": 499,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_text = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .get(\"/register\")\n  .send({ email: random_text + \"@gmail.com\", password: random_text, name: random_text, ip_address: \"127.0.0.1\" });\nassert(response.status).to.eql(405);",
              "err": {},
              "uuid": "fee6294f-edd0-4917-af3e-188c7cbde8b6",
              "parentUUID": "cd0fdb16-a976-4d81-97bf-3277b9f3d531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Method PUT",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Method PUT",
              "timedOut": false,
              "duration": 506,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_text = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .put(\"/register\")\n  .send({ email: random_text + \"@gmail.com\", password: random_text, name: random_text, ip_address: \"127.0.0.1\" });\n\nassert(response.status).to.eql(405);",
              "err": {},
              "uuid": "4a0fde92-9765-4820-9145-79c1afccbba5",
              "parentUUID": "cd0fdb16-a976-4d81-97bf-3277b9f3d531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Method PATCH",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Method PATCH",
              "timedOut": false,
              "duration": 498,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_text = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .patch(\"/register\")\n  .send({ email: random_text + \"@gmail.com\", password: random_text, name: random_text, ip_address: \"127.0.0.1\" });\n\nassert(response.status).to.eql(405);",
              "err": {},
              "uuid": "28aec267-3ae0-4311-a4e7-c315c0ddd864",
              "parentUUID": "cd0fdb16-a976-4d81-97bf-3277b9f3d531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Form-Data as Body",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Form-Data as Body",
              "timedOut": false,
              "duration": 501,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_text = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .type('form')\n  .send({ email: random_text + \"@gmail.com\", password: random_text, name: random_text});\nassert(response.status).to.eql(500);",
              "err": {},
              "uuid": "82424ada-3c51-4a82-90f0-e8fdad72a383",
              "parentUUID": "cd0fdb16-a976-4d81-97bf-3277b9f3d531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with xx-www-form-urlencoded as Body",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with xx-www-form-urlencoded as Body",
              "timedOut": false,
              "duration": 495,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_text = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .set('content-Type', 'application/x-www-form-urlencoded')\n  .send({ email: random_text + \"@gmail.com\", password: random_text, name: random_text});\nassert(response.status).to.eql(500);",
              "err": {},
              "uuid": "8f47bd09-f32d-4385-9ef0-a2ce428c0d1e",
              "parentUUID": "cd0fdb16-a976-4d81-97bf-3277b9f3d531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Integer Type in Email",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Integer Type in Email",
              "timedOut": false,
              "duration": 964,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_text = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .send({ email: 123456789, password: random_text, name: random_text});\nassert(response.status).to.eql(500);",
              "err": {},
              "uuid": "92727293-4226-4aae-88f8-d338189a396c",
              "parentUUID": "cd0fdb16-a976-4d81-97bf-3277b9f3d531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Integer Type in Name",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Integer Type in Name",
              "timedOut": false,
              "duration": 496,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_text = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .send({ email: random_text + \"@gmail.com\", password: random_text, name: 123456789});\nassert(response.status).to.eql(500);",
              "err": {},
              "uuid": "70d41f4f-85d2-487d-91dd-ce78801a7554",
              "parentUUID": "cd0fdb16-a976-4d81-97bf-3277b9f3d531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Integer Type in Password",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Integer Type in Password",
              "timedOut": false,
              "duration": 495,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_text = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .send({ email: random_text + \"@gmail.com\", password: 123456789, name: random_text});\nconst hasil_response = response.body;\nassert(response.status).to.eql(500);",
              "err": {},
              "uuid": "09568a38-fdb0-4e12-b2c8-61bf10256581",
              "parentUUID": "cd0fdb16-a976-4d81-97bf-3277b9f3d531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Integer Type in Email Start with 0",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Integer Type in Email Start with 0",
              "timedOut": false,
              "duration": 507,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_text = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .send({ email: 08123456789, password: random_text, name: random_text});\nconst hasil_response = response.body;\nassert(response.status).to.eql(500);",
              "err": {},
              "uuid": "5bfe7731-c683-477b-b330-6dec7678a321",
              "parentUUID": "cd0fdb16-a976-4d81-97bf-3277b9f3d531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Integer Type in Name Start with 0",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Integer Type in Name Start with 0",
              "timedOut": false,
              "duration": 501,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_text = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .send({ email: random_text + \"@gmail.com\", password: random_text, name: 08123456789});\nconst hasil_response = response.body;\nassert(response.status).to.eql(500);",
              "err": {},
              "uuid": "b54a90a2-caa5-4a89-ae04-5adbd3b63c62",
              "parentUUID": "cd0fdb16-a976-4d81-97bf-3277b9f3d531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Integer Type in Password Start with 0",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Integer Type in Password Start with 0",
              "timedOut": false,
              "duration": 500,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_text = Math.random().toString(36).substring(7);\nconst response = await request_url\n  .post(\"/register\")\n  .send({ email: random_text + \"@gmail.com\", password: 08123456789, name: random_text});\nconst hasil_response = response.body;\nassert(response.status).to.eql(500);",
              "err": {},
              "uuid": "bac89da8-07d3-4df6-a348-444b3d91bb38",
              "parentUUID": "cd0fdb16-a976-4d81-97bf-3277b9f3d531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with Existing Registered Email Gmail",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with Existing Registered Email Gmail",
              "timedOut": false,
              "duration": 503,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request_url\n  .post(\"/register\")\n  .send({ email: \"tester@gmail.com\", password: \"aditya.qa\", name: \"Test Email Gmail\"});\nconst hasil_response = response.body;\nassert(response.body.status).to.eql('FAILED_REGISTER');\nassert(response.body.data).to.eql('Email sudah terdaftar, gunakan Email lain');\nassert(hasil_response).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {},
              "uuid": "fd517d39-c732-4744-9e77-49d7fecc1844",
              "parentUUID": "cd0fdb16-a976-4d81-97bf-3277b9f3d531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify Failed Register with (.) in Existing Registered Email Gmail",
              "fullTitle": "Test POST /REGISTER Verify Failed Register with (.) in Existing Registered Email Gmail",
              "timedOut": false,
              "duration": 520,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request_url\n  .post(\"/register\")\n  .send({ email: \"tes.ter@gmail.com\", password: \"aditya.qa\", name: \"Test Email Gmail\" });\nconst hasil_response = response.body;\nassert(response.body.status).to.eql('FAILED_REGISTER');\nassert(response.body.data).to.eql('Email sudah terdaftar, gunakan Email lain');\nassert(hasil_response).to.include.keys(\"data\", \"message\", \"status\");",
              "err": {},
              "uuid": "f26a500e-9974-4218-901f-b785b60051ec",
              "parentUUID": "cd0fdb16-a976-4d81-97bf-3277b9f3d531",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ed71d938-b233-48c9-97fe-b168f165437f",
            "7cc9e180-6b18-4238-ba2e-239d9058369c",
            "978a9ba3-1d64-44d7-9811-debee043279a",
            "516599c1-a93a-4ed0-a03f-ddd21fb76038",
            "980cb63f-dffd-4849-ad73-401933961894",
            "8087f0d4-a0da-493a-8309-ccc40c683532",
            "16468c2c-9072-49b5-bf20-7f306ba97d20",
            "5a4591ee-a41a-4598-b7b0-62d120458f14",
            "c454bb08-3205-4455-8fdd-62a192646d39",
            "beef2b4d-ba71-4699-bfc1-1e4794df6393",
            "2f8ffe08-7753-4637-affd-0493d9596778",
            "908a8e7b-e1b5-405e-bcca-e95fb77f27aa",
            "1ad0f120-1838-40fe-aa7a-2fb7ebf0911d",
            "225dc1fd-bc30-4f85-b1b5-12fdbbfba998",
            "17320b66-5be2-4987-8212-b1a54c78fd4d",
            "f5970bde-3ae2-45c4-b299-6a9d5755e46b",
            "9c6d097f-a264-4647-b6f7-d48bbc7fabcb",
            "6a506182-b28d-4ee2-bd58-4bbd126ab878",
            "ae2b8762-aa84-4b6e-9ba1-13208e87c4f1",
            "84684a6e-e145-4642-b495-45d97da0d80b",
            "fee6294f-edd0-4917-af3e-188c7cbde8b6",
            "4a0fde92-9765-4820-9145-79c1afccbba5",
            "28aec267-3ae0-4311-a4e7-c315c0ddd864",
            "82424ada-3c51-4a82-90f0-e8fdad72a383",
            "8f47bd09-f32d-4385-9ef0-a2ce428c0d1e",
            "92727293-4226-4aae-88f8-d338189a396c",
            "70d41f4f-85d2-487d-91dd-ce78801a7554",
            "09568a38-fdb0-4e12-b2c8-61bf10256581",
            "5bfe7731-c683-477b-b330-6dec7678a321",
            "b54a90a2-caa5-4a89-ae04-5adbd3b63c62",
            "bac89da8-07d3-4df6-a348-444b3d91bb38",
            "fd517d39-c732-4744-9e77-49d7fecc1844",
            "f26a500e-9974-4218-901f-b785b60051ec"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 19087,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.0.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "api-register-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "Register",
        "reportFilename": "api-register-report"
      },
      "version": "6.2.0"
    }
  }
}